<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cheatsheets | Bodo Burger</title><link>https://bodoburger.github.io/categories/cheatsheets/</link><atom:link href="https://bodoburger.github.io/categories/cheatsheets/index.xml" rel="self" type="application/rss+xml"/><description>cheatsheets</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Bodo Burger 2019</copyright><lastBuildDate>Tue, 11 Jul 2017 00:00:00 +0000</lastBuildDate><image><url>https://bodoburger.github.io/img/icon-192.png</url><title>cheatsheets</title><link>https://bodoburger.github.io/categories/cheatsheets/</link></image><item><title>Git Resources / Cheat Sheet</title><link>https://bodoburger.github.io/post/2017-07-git-cheat-sheet/</link><pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate><guid>https://bodoburger.github.io/post/2017-07-git-cheat-sheet/</guid><description>
&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;
&lt;p&gt;This blog post combines both a collection of useful resources on Git and
a cheat sheet for git commands I googled repeatedly.
It will be updated from time to time.&lt;/p&gt;
&lt;h2 id=&#34;useful-articles-resources&#34;&gt;Useful articles / resources&lt;/h2&gt;
&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs&#34; target=&#34;_blank&#34;&gt;Git reference manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2&#34; target=&#34;_blank&#34;&gt;Pro Git book (2nd, 2014)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide&#34; target=&#34;_blank&#34;&gt;Git for beginners on stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rogerdudler.github.io/git-guide/&#34; target=&#34;_blank&#34;&gt;git - the simple guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/&#34; target=&#34;_blank&#34;&gt;The beginner&amp;rsquo;s guide to contributing to a GitHub project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://sethrobertson.github.io/GitFixUm/fixup.html&#34; target=&#34;_blank&#34;&gt;On undoing, fixing, or removing commits in git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://justinhileman.info/article/git-pretty/&#34; target=&#34;_blank&#34;&gt;Git pretty chart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;interesting-discussions-on-git&#34;&gt;Interesting discussions on Git&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34; target=&#34;_blank&#34;&gt;A successful Git branching model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34; target=&#34;_blank&#34;&gt;How to Write a Git Commit Message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lornajane.net/posts/2015/code-reviews-before-you-even-run-the-code&#34; target=&#34;_blank&#34;&gt;Code Reviews: Before You Even Run The Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/69178/what-is-the-benefit-of-gits-two-stage-commit-process-staging&#34; target=&#34;_blank&#34;&gt;What is the benefit of gits two stage commit process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4878358/why-would-i-want-stage-before-committing-in-git&#34; target=&#34;_blank&#34;&gt;Why would I want to stage before committing?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KirstieJane/STEMMRoleModels/wiki/Syncing-your-fork-to-the-original-repository-via-the-browser&#34; target=&#34;_blank&#34;&gt;Keep your fork up to date with the original repo via GitHub browser interface&lt;/a&gt;
(&lt;a href=&#34;https://stackoverflow.com/questions/20984802/how-can-i-keep-my-fork-in-sync-without-adding-a-separate-remote/21131381#21131381&#34; target=&#34;_blank&#34;&gt;stackoverflow&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;branches&#34;&gt;Branches&lt;/h2&gt;
&lt;h3 id=&#34;change-branch-without-committing-changes-stash-and-pop&#34;&gt;Change branch without committing changes: stash and pop&lt;/h3&gt;
&lt;p&gt;Want to have a look at another branch without committing changes done so far?
Put them in a stash where they can hide until you switch back.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git stash # on the original branch
$ git checkout other-branch
# do some stuff on the other branch
$ git checkout original-branch
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More about &lt;a href=&#34;https://git-scm.com/docs/git-stash&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;git-stash&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;create-a-local-branch-push-it-to-a-remote-repository-and-track-it&#34;&gt;Create a local branch, push it to a remote repository and track it&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git checkout -b MyNewBranch # create and switch to new branch
# do some stuff
$ git push -u origin MyNewBranch
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;delete-local-branch&#34;&gt;Delete local branch&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git branch -d MyLocalBranch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;
&lt;h3 id=&#34;show-or-change-git-username-or-email-address&#34;&gt;Show or change Git username or email address&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git config --list # repository-specific settings
$ git config --list --global # global git settings
$ git config user.name &amp;quot;Enrico Pallazzo&amp;quot;
$ git config user.email &amp;quot;enrico.pallazzo@lapd.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The global settings are stored in the Git config file
in the HOME directory (&lt;code&gt;~/.gitconfig&lt;/code&gt;),
repository-specific settings are found at &lt;code&gt;.git/config&lt;/code&gt;
in the respective repository folder.&lt;/p&gt;
&lt;h2 id=&#34;index&#34;&gt;Index&lt;/h2&gt;
&lt;h3 id=&#34;remove-files-from-the-index-without-removing-them-from-disc&#34;&gt;Remove files from the index without removing them from disc&lt;/h3&gt;
&lt;p&gt;If you forgot to add a file to &lt;code&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git rm -rf --cached file-name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file is now untracked and can be added to &lt;code&gt;.gitignore&lt;/code&gt;.
Then, you can commit the deletion and the modified gitignore file.&lt;/p&gt;
&lt;h2 id=&#34;merging&#34;&gt;Merging&lt;/h2&gt;
&lt;h3 id=&#34;merge-master-into-feature-branch-before-making-a-pr&#34;&gt;Merge master into feature branch before making a PR&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git checkout master
$ git pull
$ git checkout new-feature
$ git add *files-and-changes*
$ git commit -m &amp;quot;feature description&amp;quot;
$ git reset HEAD --hard # removes all uncommited files
$ rm *untracked-files* # to prevent merge conflicts
$ git merge master
# resolve potential merge conflicts
$ git commit -m &amp;quot;resolved mergeconflicts | merged master&amp;quot;
$ git push origin new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;remote&#34;&gt;Remote&lt;/h2&gt;
&lt;h3 id=&#34;push-local-repository-to-existing-remote&#34;&gt;Push local repository to existing remote&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git remote add origin git@github.com:USERNAME/REPOSITORY.git
$ git push --all --set-upstream origin
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;show-or-change-remote&#34;&gt;Show or change remote&lt;/h3&gt;
&lt;p&gt;In this example we switch from HTTPS to SSH:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;$ git remote -v
&amp;gt; origin https://github.com/USERNAME/REPOSITORY.git (fetch)
&amp;gt; origin https://github.com/USERNAME/REPOSITORY.git (push)
$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git
$ git remote -v
&amp;gt; origin git@github.com:USERNAME/REPOSITORY.git (fetch)
&amp;gt; origin git@github.com:USERNAME/REPOSITORY.git (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;submodules&#34;&gt;Submodules&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/git-submodule&#34; target=&#34;_blank&#34;&gt;https://git-scm.com/docs/git-submodule&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-a-submodule&#34;&gt;Add a submodule&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git submodule add git@github.com:USERNAME/REPOSITORY.git PATH/TO/SUBMODULEDIR
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;download-files-to-empty-submodule-directory&#34;&gt;Download files to empty submodule directory&lt;/h3&gt;
&lt;p&gt;When cloning a repository with submodules and the submodule directories are empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;remove-a-submodule-leaving-no-trace&#34;&gt;Remove a submodule (leaving no trace)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;git rm PATH/TO/SUBMODULEDIR
rm -rf .git/modules/PATH/TO/SUBMODULEDIR
git config -f .git/config --remove-section submodule.PATH/TO/SUBMODULEDIR 2&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;</description></item></channel></rss>