<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>r-stats | Bodo Burger</title><link>https://bodoburger.github.io/tags/r-stats/</link><atom:link href="https://bodoburger.github.io/tags/r-stats/index.xml" rel="self" type="application/rss+xml"/><description>r-stats</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Bodo Burger 2019</copyright><lastBuildDate>Sat, 06 Apr 2019 00:00:00 +0000</lastBuildDate><image><url>https://bodoburger.github.io/img/icon-192.png</url><title>r-stats</title><link>https://bodoburger.github.io/tags/r-stats/</link></image><item><title>Feature Effects in Machine Learning Models</title><link>https://bodoburger.github.io/project/2019-feature-effects/</link><pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate><guid>https://bodoburger.github.io/project/2019-feature-effects/</guid><description>
&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#summary&#34;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#example-bike-sharing-data&#34;&gt;Example: Bike Sharing Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#model-training&#34;&gt;Model Training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#analysis&#34;&gt;Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r-package&#34;&gt;R package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;Supervised machine learning models are mostly black boxes.
The method I propose in my Master’s thesis tries to improve understanding of these black boxes.
The goal is to find a way to quantify effect sizes of features.
Average marginal effects are used in social sciences
to determine effect sizes of logistic regression models.
Applying this method to a machine learning model usually does not
adequately represent the non-convex, non-monotonic response function.
There are graphical methods like partial dependence plots or accumulated local effect plots
that visualize the response functions but do not offer a quantitative interpretation.
First, we use one of the latter methods to identify intervals
within the response function is relatively stable.
Second, we report some estimate of the feature effect separately for each interval.
Our method determines the number of necessary intervals automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-bike-sharing-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Example: Bike Sharing Data&lt;/h1&gt;
&lt;p&gt;The following examples shows
how the method can help to understand heterogeneous feature effects.
We apply the method to the Bike Sharing dataset &lt;span class=&#34;citation&#34;&gt;(Fanaee-T and Gama 2013)&lt;/span&gt;
which was further processed by &lt;span class=&#34;citation&#34;&gt;Molnar (2018)&lt;/span&gt;.
See table &lt;a href=&#34;#tab:bikes-load-data&#34;&gt;1&lt;/a&gt; for an overview of all the features.
The target &lt;code&gt;cnt&lt;/code&gt; is the number of bicycles
lent by a bicycle sharing company per day.
The features comprise calendrical and meteorological information for each day.&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:bikes-load-data&#34;&gt;Table 1: &lt;/span&gt;Excerpt of the Bike Sharing dataset&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;season&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;yr&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;mnth&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;holiday&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;weekday&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;weathersit&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;temp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;hum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;windspeed&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;cnt&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;days_since_2011&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SPRING&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SAT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MISTY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;985&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SPRING&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SUN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MISTY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SPRING&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GOOD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1349&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SPRING&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TUE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GOOD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.40&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1562&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SPRING&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WED&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GOOD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;SPRING&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;JAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;THU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GOOD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.60&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1606&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;model-training&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model Training&lt;/h2&gt;
&lt;p&gt;We use a linear model &lt;span class=&#34;citation&#34;&gt;(R Core Team 2019)&lt;/span&gt;, an SVM &lt;span class=&#34;citation&#34;&gt;(Meyer et al. 2019)&lt;/span&gt;,
a random decision forest &lt;span class=&#34;citation&#34;&gt;(Breiman et al. 2018)&lt;/span&gt; and gradient boosting &lt;span class=&#34;citation&#34;&gt;(Greenwell et al. 2019)&lt;/span&gt;.
We compare the performance of all models and the performance
of predicting the mean for each observation on a hold-out test set
(see table &lt;a href=&#34;#tab:bikes-model-training&#34;&gt;2&lt;/a&gt;).
The linear model performs relatively well
but we can improve by using a more complex machine learning model
even without extensive tuning.&lt;/p&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:bikes-model-training&#34;&gt;Table 2: &lt;/span&gt;Mean squared error, root mean squared log error,
and R squared for hold-out test set&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean(y)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lm&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;svm&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rf&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;gbm&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;mse&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.75e+06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.30e+05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.33e+05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.22e+05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.12e+05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;rmsle&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.93e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.36e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.44e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.61e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.30e-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;rsq&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.59e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.85e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.88e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.90e-01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Now analyse how changing feature values influences
the predicted number of bikes.
We focus on the three numerical features &lt;code&gt;temp&lt;/code&gt; (temperature in degree Celsius),
&lt;code&gt;hum&lt;/code&gt; (humidity in percent) and &lt;code&gt;windspeed&lt;/code&gt; (in kilometers per hour).
We apply our method to each of the complex models with default settings.
The output in &lt;code&gt;R&lt;/code&gt; looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## lm:
## temp hum windspeed
## 98.2 -13.7 -40.1
## SVM (temp)
## [-5.221, 19.26) [19.26, 32.498]
## 128.11 3.87
## SVM (hum)
## [18.792, 56.792) [56.792, 93.957]
## 7.19 -32.71
## SVM (windspeed)
## [2.834, 14.876) [14.876, 34]
## -22.7 -64.7
## RF (temp)
## [-5.221, 20.278) [20.278, 32.498]
## 104.5 -62.7
## RF (hum)
## [18.792, 64.667) [64.667, 93.957]
## -1.18 -31.97
## RF (windspeed)
## [2.834, 18.417) [18.417, 24.251) [24.251, 34]
## -16.46 -78.30 -1.64
## GBM (temp)
## [-5.221, 16.792) [16.792, 26.075) [26.075, 32.498]
## 124.2 13.9 -239.7
## GBM (hum)
## [18.792, 64.667) [64.667, 83.792) [83.792, 87.25) [87.25, 93.957]
## -3.86 -39.63 -227.00 91.19
## GBM (windspeed)
## [2.834, 8.584) [8.584, 22.959) [22.959, 24.251) [24.251, 34]
## -5.32e+01 -1.85e+01 -5.04e+02 6.60e-14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The marginal effect of the linear model is equal to the model coefficients.
So according to the model an increase of the temperature by 1° Celsius
leads to a predicted increase of &lt;span class=&#34;math inline&#34;&gt;\(98.188\)&lt;/span&gt;. rented bicycles per day.
This seems plausible for an average day.
The higher the temperature the more people are willing to go by bike.
But one could easily imagine that a temperature rise on a hot day
will make people less likely rent a bike to avoid physical exertion.
This is exactly what the results of the complex models suggest.
Below 20° the SVM predicts an increase of
&lt;span class=&#34;math inline&#34;&gt;\(128.106\)&lt;/span&gt;
bikes per day for an additional degree Celsius.
Above 20° the effect becomes negative and very small
&lt;span class=&#34;math inline&#34;&gt;\((3.867)\)&lt;/span&gt;.
The results of the random forest show two cutoff points.
At around 13° the positive marginal effect becomes smaller in size
and above 25° the effect is negative.
The effect for gradient boosting is partitioned into four intervals.
The effect of the three intervals below 27° are positive,
above 27° it is negative, similarly to the results of the other two models.
However, the absolute values of the effect fluctuate substantially
for gradient boosting.&lt;/p&gt;
&lt;p&gt;For humidity the linear model predicts a negative effect.
For the SVM the effect is positive up to around 43%.
Between 43% and 65% the effect is negative but smaller in size.
Above 65% it is negative and
four times bigger than in the previous interval.
The results for the random forest and gradient boosting
both show very small effects below roughly 65% humidity.
Above this point both models predict a decrease of rented bicycles
with rising humidity.
The histogram (figure &lt;a href=&#34;#fig:bikes-hum-hist&#34;&gt;1&lt;/a&gt;) explains
why the effect for humidity is probably non-monotonic.
Humidity usually is between 50% to 75%.
Values outside this range indicate more extreme weather conditions.
If uncommonly dry or wet air reduces people’s desire to ride a bike
we will expect a positive effect on the number of rented bikes
if humidity is below the familiar range, and a negative effect if it is above.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:bikes-hum-hist&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;figures/bikes-hum-hist-1.png&#34; alt=&#34;Histogram for feature humidity of the Bike Sharing dataset.&#34; width=&#34;40%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Histogram for feature &lt;code&gt;humidity&lt;/code&gt; of the Bike Sharing dataset.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Wind makes cycling less attractive, so one associates higher wind speed
with a reduced willingness to rent a bike.
The linear model predicts a negative effect (&lt;span class=&#34;math inline&#34;&gt;\(-40.149\)&lt;/span&gt;).
For both SVM and random forest our method proposes a negative effect
that is constant over the whole feature distribution.
Consequently, in the case of wind speed a linear model seems to be appropriate
to represent the relationship.
Gradient boosting shows a negative effect for five intervals,
the reported values are not very stable, again.&lt;/p&gt;
&lt;p&gt;In this exemplary application we showed that
the linear model does not suffice to represent the varying response function types.
A user may come to wrong conclusions about the number of rented bikes
depending on the weather conditions of the day.
The proposed method enables the user to make quantitative statements
as if he was using a linear model
while preserving the non-linear, non-monotonic relationship where necessary.
Thus, he can combine a better performing model with a comprehensible interpretation.
The results for the gradient boosting model are less convincing.
Due to the stepped response function the model is less appropriate
for making quantitative statements about the feature effect.
The estimates fluctuate between high values and values close to zero.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:bikes-results-svm&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;figures/bikes-results-svm-1.png&#34; alt=&#34;Bike sharing data. Results SVM.&#34; width=&#34;1152&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Bike sharing data. Results SVM.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:bikes-results-gbm&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;figures/bikes-results-gbm-1.png&#34; alt=&#34;Bike sharing data. Results gradient boosting.&#34; width=&#34;1152&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: Bike sharing data. Results gradient boosting.
&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:bikes-results-rf&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;figures/bikes-results-rf-1.png&#34; alt=&#34;Bike sharing data. Results random forest.&#34; width=&#34;1152&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4: Bike sharing data. Results random forest.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R package&lt;/h1&gt;
&lt;p&gt;The method is implemented in &lt;strong&gt;R&lt;/strong&gt; supporting a variety of models out of the box.
Source code and more information can be found on GitHub:
&lt;a href=&#34;https://github.com/BodoBurger/intame&#34; class=&#34;uri&#34;&gt;https://github.com/BodoBurger/intame&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1 unnumbered&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;div id=&#34;refs&#34; class=&#34;references&#34;&gt;
&lt;div id=&#34;ref-R-randomForest&#34;&gt;
&lt;p&gt;Breiman, Leo, Adele Cutler, Andy Liaw, and Matthew Wiener. 2018. &lt;em&gt;RandomForest: Breiman and Cutler’s Random Forests for Classification and Regression&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=randomForest&#34;&gt;https://CRAN.R-project.org/package=randomForest&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-fanaee2013event&#34;&gt;
&lt;p&gt;Fanaee-T, Hadi, and Joao Gama. 2013. “Event Labeling Combining Ensemble Detectors and Background Knowledge.” &lt;em&gt;Progress in Artificial Intelligence&lt;/em&gt;. Springer Berlin Heidelberg, 1–15. &lt;a href=&#34;https://doi.org/10.1007/s13748-013-0040-3&#34;&gt;https://doi.org/10.1007/s13748-013-0040-3&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-gbm&#34;&gt;
&lt;p&gt;Greenwell, Brandon, Bradley Boehmke, Jay Cunningham, and GBM Developers. 2019. &lt;em&gt;Gbm: Generalized Boosted Regression Models&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=gbm&#34;&gt;https://CRAN.R-project.org/package=gbm&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-e1071&#34;&gt;
&lt;p&gt;Meyer, David, Evgenia Dimitriadou, Kurt Hornik, Andreas Weingessel, and Friedrich Leisch. 2019. &lt;em&gt;E1071: Misc Functions of the Department of Statistics, Probability Theory Group (Formerly: E1071), Tu Wien&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=e1071&#34;&gt;https://CRAN.R-project.org/package=e1071&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-molnar2018interpretable&#34;&gt;
&lt;p&gt;Molnar, Christoph. 2018. &lt;em&gt;Interpretable Machine Learning - a Guide for Making Black Box Models Explainable&lt;/em&gt;. Creative Commons. &lt;a href=&#34;https://christophm.github.io/interpretable-ml-book/&#34;&gt;https://christophm.github.io/interpretable-ml-book/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;ref-R-base&#34;&gt;
&lt;p&gt;R Core Team. 2019. &lt;em&gt;R: A Language and Environment for Statistical Computing&lt;/em&gt;. Vienna, Austria: R Foundation for Statistical Computing. &lt;a href=&#34;https://www.R-project.org/&#34;&gt;https://www.R-project.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Use R, Google Sheets and a nutrition API to calculate a nutrition table</title><link>https://bodoburger.github.io/post/2019-04-nutrition-table-google-sheets/</link><pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate><guid>https://bodoburger.github.io/post/2019-04-nutrition-table-google-sheets/</guid><description>
&lt;p&gt;I recently stumbled upon this
&lt;a href=&#34;https://greenysherry.com/life-changing-brot-mit-nuessen-nach-my-new-roots-glutenfrei-vegan/&#34;&gt;bread recipe&lt;/a&gt;.
It’s quickly prepared, the bread tastes great and is full of valuable ingredients
(only oats, nuts and seeds).
However, being homemade it does not come with a nutrition table.
The following shows an easy way to create one.&lt;/p&gt;
&lt;p&gt;We put the recipe into a spreadsheet
(&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1C0AwjQYrudrV3ZLgQJZnCr9La7OVftRTZn3QKMrJx5E&#34;&gt;recipe&lt;/a&gt;).
Another spreadsheet contains the nutritional values of the macro nutrients of each ingredient
(&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1qgo8Yefb5nx5PVElZvmf6nSDI6RfN2ofd8CeMuSklHk&#34;&gt;food stats&lt;/a&gt;).
We combine these using &lt;strong&gt;R&lt;/strong&gt; to get the nutrition table.
Then, we look at an alternative to manually creating a spreadsheet with nutritional information
by using an online database.
As a bonus, we can calculate the price of the recipe.&lt;/p&gt;
&lt;div id=&#34;downloading-google-sheets-to-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading Google Sheets to R&lt;/h2&gt;
&lt;p&gt;A simple way to import Google Sheets to &lt;strong&gt;R&lt;/strong&gt; is the
&lt;a href=&#34;https://cran.r-project.org/package=gsheet&#34;&gt;gsheet&lt;/a&gt; package.
We only need to supply the sharing link.
It returns a &lt;a href=&#34;https://tibble.tidyverse.org/&#34;&gt;tibble&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;food_stats = gsheet::gsheet2tbl(&amp;quot;https://docs.google.com/spreadsheets/d/1qgo8Yefb5nx5PVElZvmf6nSDI6RfN2ofd8CeMuSklHk&amp;quot;)
recipe = gsheet::gsheet2tbl(&amp;quot;https://docs.google.com/spreadsheets/d/1C0AwjQYrudrV3ZLgQJZnCr9La7OVftRTZn3QKMrJx5E&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;food_stats&lt;/code&gt; contains more ingredients than we need for our bread recipe.
So when we merge both data frames we only want to keep the rows
that contain the ingredients of the recipe.
This is done by &lt;code&gt;left_join()&lt;/code&gt; from the
&lt;a href=&#34;https://cran.r-project.org/package=dplyr&#34;&gt;dplyr&lt;/a&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
bread_ingredient_stats = left_join(recipe, food_stats, &amp;quot;Description&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-the-nutritional-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calculating the nutritional values&lt;/h2&gt;
&lt;p&gt;We have 10 ingredients. First, we create a vector that gives us
the quantity of each ingredient in grams,
then we select the columns that are relevant for the nutrition table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nutrient_names = c(&amp;quot;Calories (kcal)&amp;quot;, &amp;quot;Total Fat&amp;quot;, &amp;quot;Saturated Fat&amp;quot;,
&amp;quot;Total Carbs&amp;quot;, &amp;quot;Sugar&amp;quot;, &amp;quot;Dietary Fiber&amp;quot;, &amp;quot;Protein&amp;quot;)
quantities = select(bread_ingredient_stats, &amp;quot;Quantity (gr)&amp;quot;)[[1]]
nutrition_values = bread_ingredient_stats %&amp;gt;% select(nutrient_names)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following calculation gives us the quantity of
each macro nutrient in our bread &lt;em&gt;per 100g&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nutrition_table = colSums(nutrition_values * quantities) / sum(quantities)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we can print our nutrition table:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(nutrition_table, digits = 1, col.names = &amp;quot;per 100g&amp;quot;,
caption = &amp;quot;Nutrition table&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-5&#34;&gt;Table 1: &lt;/span&gt;Nutrition table&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;per 100g&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Calories (kcal)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;307.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Total Fat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Saturated Fat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Total Carbs&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Sugar&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Dietary Fiber&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Protein&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Calorie-wise very similar to your &lt;a href=&#34;https://www.google.com/search?q=brown+bread&#34;&gt;typical brown bread&lt;/a&gt;, but rich in fat.
Trust me, the bread is very filling, so you won’t be able to eat too much of it anyways.
And how much does it cost?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;prices = select(bread_ingredient_stats, &amp;quot;Price (€)&amp;quot;)[[1]]
packaging = select(bread_ingredient_stats, &amp;quot;Packaging (g)&amp;quot;)[[1]]
(price_total = sum(prices / packaging * quantities, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.208962&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One loaf of bread is 3.21€ (not including energy and time)
weighing 910 grams (raw ingredients).
I think that is a fair price for a bread I can eat from for a whole week.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-the-api-of-a-nutrition-database&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using the API of a nutrition database&lt;/h2&gt;
&lt;p&gt;Instead of manually creating a spreadsheet for the nutritional values of each ingredient
we can fetch the information from on online database.
We use &lt;a href=&#34;https://openfoodfacts.org&#34;&gt;openfoodfacts&lt;/a&gt;.
It’s a crowd-sourced database of food stats.
To identify a product we need a barcode for each ingredient
which I added to the recipe spreadsheet.
The openfoodfacts API returns a JSON file which we can convert to a list
using the &lt;a href=&#34;https://cran.r-project.org/package=rjson&#34;&gt;rjson&lt;/a&gt; package.
We write two helper functions to fetch and extract the relevant information.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(&amp;quot;rjson&amp;quot;)
fetch_json = function(barcode, url = &amp;quot;https://world.openfoodfacts.org/api/v0/product/&amp;quot;) {
query = paste0(url, barcode, &amp;quot;.json&amp;quot;)
fromJSON(file = query)
}
extract_nutrition_values = function(food_list,
nutriments = c(&amp;quot;energy_100g&amp;quot;, &amp;quot;fat_100g&amp;quot;, &amp;quot;saturated-fat_100g&amp;quot;,
&amp;quot;carbohydrates_100g&amp;quot;, &amp;quot;sugars_100g&amp;quot;, &amp;quot;fiber_100g&amp;quot;,
&amp;quot;proteins_100g&amp;quot;)) {
nv = setNames(rep(0, length(nutriments)), nutriments)
tmp = unlist(food_list$product$nutriments[nutriments])
nv[names(tmp)] = tmp
nv
}
barcodes = bread_ingredient_stats$Barcode[-10] # water does not have a barcode
nutrition_values_api = matrix(0, nrow = 10, ncol = length(nutrition_values),
dimnames = list(1:10, nutrient_names))
for(i in seq_along(barcodes)) {
food_list_tmp = fetch_json(barcodes[i])
nutrition_values_api[i,] = extract_nutrition_values(food_list_tmp)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nutrition_values_api&lt;/code&gt; has the same structure as &lt;code&gt;nutrition_values&lt;/code&gt; from above,
so we can proceed as before:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(nutrition_table_api = colSums(nutrition_values_api * quantities) / sum(quantities))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Calories (kcal) Total Fat Saturated Fat Total Carbs
## 1344.0329670 22.4906593 4.7263736 12.3516484
## Sugar Dietary Fiber Protein
## 0.4923077 8.9291209 12.5313187&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results for the macro nutrients differ slightly which is expected
because we changed the data source.
However, the value for &lt;em&gt;calories&lt;/em&gt; quadrupled
because the API reported energy in kilojoule (kJ) instead of kilocalories.
To correct for this we divide the value by &lt;span class=&#34;math inline&#34;&gt;\(4.1858\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nutrition_table_api[1] = nutrition_table_api[1] / 4.1858
knitr::kable(nutrition_table_api, digits = 1, col.names = &amp;quot;per 100g&amp;quot;,
caption = &amp;quot;Nutrition table&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-9&#34;&gt;Table 2: &lt;/span&gt;Nutrition table&lt;/caption&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;per 100g&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Calories (kcal)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;321.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Total Fat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Saturated Fat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Total Carbs&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Sugar&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Dietary Fiber&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Protein&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And we are done!&lt;/p&gt;
&lt;/div&gt;</description></item></channel></rss>